install.packages("dplyr")
install.packages("ggplot2")
n <- 500; x <- seq(0, 4*pi, length=n); y <- sin(x) + rnorm(n, sd=.3)
knots <- seq(0, 8 * pi, length=20)
splineTerms <- sapply(knots, function(knot) (x > knot) * (x - knot))
xMat <- cbind(1, x, splineTerms)
yhat <- predict(lm(y ~ xMat - 1))
plot(x, y, frame = FALSE, pch = 21, bg = "lightblue", cex = 2)
lines(x, yhat, col = "red", lwd = 2)
library(arules)
library(arulesViz)
library(plyr)
#--- Clear previous memory set. ------------
rm(list=ls())
setwd("C:\\Python27\\MBA-ECaaP\\working")
txn_A = read.transactions(file="31102017-A-mba-source.csv", rm.duplicates= TRUE, format="basket", sep=",", cols=1)
summary(txn_A)
ink_rules  <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="INK"), control = list(verbose=F))
t_rules    <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="TONER"), control = list(verbose=F))
pa_rules   <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="PAPER"), control = list(verbose=F))
p_rules    <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="PRINTER"), control = list(verbose=F))
oe_rules   <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="OFFICE EQUIPMENT"), control = list(verbose=F))
s_rules    <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="STATIONARY"), control = list(verbose=F))
tech_rules <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="TECHNOLOGY"), control = list(verbose=F))
c_rules    <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="CLEANING"), control = list(verbose=F))
b_rules    <- apriori(data=txn_A, parameter=list(supp=0, conf = 0, minlen=2), appearance = list(default="rhs", lhs="BREAKROOM"), control = list(verbose=F))
ink_rules  <- sort(ink_rules, decreasing=TRUE, by="confidence")
t_rules    <- sort(t_rules, decreasing=TRUE, by="confidence")
pa_rules   <- sort(pa_rules, decreasing=TRUE, by="confidence")
p_rules    <- sort(p_rules, decreasing=TRUE, by="confidence")
oe_rules   <- sort(oe_rules, decreasing=TRUE, by="confidence")
s_rules    <- sort(s_rules, decreasing=TRUE, by="confidence")
tech_rules <- sort(tech_rules, decreasing=TRUE, by="confidence")
c_rules    <- sort(c_rules, decreasing=TRUE, by="confidence")
b_rules    <- sort(b_rules, decreasing=TRUE, by="confidence")
)
plot(b_rules, verbose=TRUE)
plot(b_rules, method='matrix')
subrules <- subset(b_rules, lift>1)
plot(subrules, method='matrix')
subrules <- subset(b_rules, lift>0)
plot(subrules, method='matrix')
subrules
subrules[1]
subrules
pring subrules
plot(b_rules, method='graph')
plot(b_rules, method='graph', control = list(verbose=T))
plot(b_rules, method='graph', control = list(verbose=T, main="TEST"))
plot(b_rules, method='graph', control = list(verbose=T, main="MBA of BREAKROOM"))
plot(b_rules, method='graph', control = list(verbose=T, main=""))
plot(b_rules, method='graph', control = list(verbose=T, main="", gp_lines=Black))
plot(b_rules, method='graph', control = list(verbose=T, main="", gp_lines=rgb(0,0,0)))
plot(b_rules, method='graph', control = list(verbose=T, main=""), col=grey.colors(50, alpha =.8))
plot(b_rules, method='graph', control = list(verbose=T, main=""), col=grey.colors(50, alpha =0.2))
plot(b_rules, method='graph', control = list(verbose=T, main=""), col=grey.colors(50, alpha =0.8))
plot(b_rules, method='graph', control = list(verbose=T, main=""), col=sequential_hcl(100))
library(colorspace) # for sequential_hcl
plot(b_rules, method='graph', control = list(verbose=T, main=""), col=sequential_hcl(100))
plot(b_rules, method='graph', control = list(verbose=T, main="", col=sequential_hcl(100)))
plot(b_rules, method='graph', control = list(verbose=T, main="", col=sequential_hcl(1000)))
plot(b_rules, method='graph', control = list(verbose=T, main="", col=sequential_hcl(5000)))
library(plotly)
plot(b_rules, method='graph', control = list(verbose=T, main=""), nodeCol = grey.colors(10), edgeCol = grey(.7), alpha = 1))
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=1)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=2)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=0)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(10), edgeCol=grey(.7), alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(80), edgeCol=grey(.7), alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(80), edgeCol=grey(.9), alpha=0.8)
plot(b_rules, method='graph', engine="graphviz", control=list(verbose=T, main=""), nodeCol=grey.colors(80), edgeCol=grey(.9), alpha=0.8)
install.package("Rgraphviz")
install.packages("Rgraphviz")
plot(b_rules, method='graph', engine="graphviz", control=list(verbose=T, main=""), gp_lines=gpar(col=blues9))
plot(b_rules, method='graph',  control=list(verbose=T, main=""), gp_lines=gpar(col=blues9))
plot(b_rules, method='graph',  control=list(verbose=T, main=""), gp_lines=gpar(col="blue"))
plot(b_rules, method='graph', engine="graphviz", control=list(verbose=T, main=""), nodeCol="blue", edgeCol=grey(.9), alpha=0.8)
plot(b_rules, method='graph',  control=list(verbose=T, main=""), nodeCol="blue", edgeCol=grey(.9), alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=grey.colors(80), edgeCol="blue", alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=red.colors(80), edgeCol="blue", alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=Red.colors(80), edgeCol="blue", alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), nodeCol=yellow.colors(80), edgeCol="blue", alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), edgeCol="blue", alpha=0.8)
plot(b_rules, method='graph', control=list(verbose=T, main=""), edgeCol="blue", alpha=1)
plot(b_rules, method='graph', control=list(verbose=T, main=""), edgeCol="blue", alpha=0.2)
plot(b_rules, method='graph', control=list(verbose=T, main=""), edgeCol="blue", alpha=0.9)
plot(b_rules, method='graph', control=list(verbose=T, main=""), edgeCol="blue", alpha=0.99)
plot(b_rules, method='graph', control=list(verbose=T, main=""), edgeCol="blue")
plot(b_rules, method='graph', control=list(verbose=T, main=""),gp_labels = gpar(col = "blue", cex=1, fontface="italic"))
plot(b_rules, method='graph', control=list(verbose=T, main=""))
plot(b_rules, method='graph', control = list(verbose=T, main=""), col=grey.colors(50, alpha =0.8))
plot(b_rules, method='graph', engine="htmlwidget", control=list(verbose=T, main=""))
plot(b_rules, method='graph', control=list(verbose=T, main=""))
plot(b_rules, method='graph', control=list(main=""))
plot(b_rules, method='graph', control=list(main=""))
plot(b_rules, method='graph', control=list(verbose=T, main=""))
plot(b_rules, method='graph', control=list(verbose=T, main=""))
plot(b_rules, method='graph', control=list(verbose=F, main=""))
plot(b_rules, method='graph', control=list(verbose=F, main=""))
plot(b_rules, method='graph', control=list(verbose=F, main=""))
plot(b_rules, method='graph', control=list(verbose=F, main=""))
dev.copy(png, filename="b_rules.png")
dev.off()
plot(b_rules, method='graph', control=list(verbose=F, main=""))
dev.copy(device=png, filename="b_rules.png", width=1600, height=800)
dev.off()
plot(b_rules, method='graph', control=list(verbose=F, main=""))
dev.copy(device=png, filename="b_rules.png", width=1000, height=800)
dev.off()
plot(ink_rules, method='graph', control=list(verbose=F, main=""))
dev.copy(device=png, filename="ink_rules.png", width=1000, height=800)
dev.off()
plot(ink_rules, method='graph', control=list(verbose=F, main=""))
dev.copy(device=png, filename="ink_rules.png", width=1000, height=800)
dev.off()
plot(b_rules, method='graph', control=list(verbose=F, main=""))
dev.copy(device=png, filename="b_rules.png", width=1000, height=800)
dev.off()
